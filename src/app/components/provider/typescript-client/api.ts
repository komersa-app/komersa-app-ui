/* tslint:disable */
/* eslint-disable */
/**
 * Komersa Api Doc
 * HTTP APIs for managing e-commerce resources
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AdminDtoRequest
 */
export interface AdminDtoRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminDtoRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AdminDtoRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AdminDtoRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface AdminDtoResponse
 */
export interface AdminDtoResponse {
    /**
     * 
     * @type {number}
     * @memberof AdminDtoResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AdminDtoResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminDtoResponse
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminDtoResponse
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface ApiErrorResponse
 */
export interface ApiErrorResponse {
    /**
     * Error code
     * @type {number}
     * @memberof ApiErrorResponse
     */
    'errorCode'?: number;
    /**
     * Error description
     * @type {string}
     * @memberof ApiErrorResponse
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface AppointmentDtoRequest
 */
export interface AppointmentDtoRequest {
    /**
     * 
     * @type {string}
     * @memberof AppointmentDtoRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AppointmentDtoRequest
     */
    'status': string;
    /**
     * 
     * @type {number}
     * @memberof AppointmentDtoRequest
     */
    'carId': number;
    /**
     * 
     * @type {number}
     * @memberof AppointmentDtoRequest
     */
    'adminId': number;
    /**
     * 
     * @type {number}
     * @memberof AppointmentDtoRequest
     */
    'visitorId': number;
}
/**
 * 
 * @export
 * @interface AppointmentDtoResponse
 */
export interface AppointmentDtoResponse {
    /**
     * 
     * @type {number}
     * @memberof AppointmentDtoResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppointmentDtoResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppointmentDtoResponse
     */
    'datetime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppointmentDtoResponse
     */
    'status'?: string;
    /**
     * 
     * @type {CarDtoResponse}
     * @memberof AppointmentDtoResponse
     */
    'car'?: CarDtoResponse;
    /**
     * 
     * @type {AdminDtoResponse}
     * @memberof AppointmentDtoResponse
     */
    'admin'?: AdminDtoResponse;
    /**
     * 
     * @type {VisitorDtoResponse}
     * @memberof AppointmentDtoResponse
     */
    'visitor'?: VisitorDtoResponse;
}
/**
 * 
 * @export
 * @interface CarDtoRequest
 */
export interface CarDtoRequest {
    /**
     * 
     * @type {string}
     * @memberof CarDtoRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CarDtoRequest
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof CarDtoRequest
     */
    'color': string;
    /**
     * 
     * @type {string}
     * @memberof CarDtoRequest
     */
    'motorType': string;
    /**
     * 
     * @type {string}
     * @memberof CarDtoRequest
     */
    'power': string;
    /**
     * 
     * @type {string}
     * @memberof CarDtoRequest
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof CarDtoRequest
     */
    'type': string;
    /**
     * 
     * @type {number}
     * @memberof CarDtoRequest
     */
    'detailsId': number;
    /**
     * 
     * @type {number}
     * @memberof CarDtoRequest
     */
    'priceId': number;
}
/**
 * 
 * @export
 * @interface CarDtoResponse
 */
export interface CarDtoResponse {
    /**
     * 
     * @type {number}
     * @memberof CarDtoResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CarDtoResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CarDtoResponse
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CarDtoResponse
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof CarDtoResponse
     */
    'motorType'?: string;
    /**
     * 
     * @type {string}
     * @memberof CarDtoResponse
     */
    'power'?: string;
    /**
     * 
     * @type {string}
     * @memberof CarDtoResponse
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof CarDtoResponse
     */
    'type'?: string;
    /**
     * 
     * @type {DetailsDtoResponse}
     * @memberof CarDtoResponse
     */
    'details'?: DetailsDtoResponse;
    /**
     * 
     * @type {PricesDtoResponse}
     * @memberof CarDtoResponse
     */
    'price'?: PricesDtoResponse;
}
/**
 * 
 * @export
 * @interface DetailsDtoRequest
 */
export interface DetailsDtoRequest {
    /**
     * 
     * @type {string}
     * @memberof DetailsDtoRequest
     */
    'brand': string;
    /**
     * 
     * @type {string}
     * @memberof DetailsDtoRequest
     */
    'model': string;
}
/**
 * 
 * @export
 * @interface DetailsDtoResponse
 */
export interface DetailsDtoResponse {
    /**
     * 
     * @type {number}
     * @memberof DetailsDtoResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DetailsDtoResponse
     */
    'brand'?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailsDtoResponse
     */
    'model'?: string;
}
/**
 * 
 * @export
 * @interface ImagesDtoRequest
 */
export interface ImagesDtoRequest {
    /**
     * 
     * @type {string}
     * @memberof ImagesDtoRequest
     */
    'url': string;
    /**
     * 
     * @type {number}
     * @memberof ImagesDtoRequest
     */
    'carId': number;
}
/**
 * 
 * @export
 * @interface ImagesDtoResponse
 */
export interface ImagesDtoResponse {
    /**
     * 
     * @type {number}
     * @memberof ImagesDtoResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ImagesDtoResponse
     */
    'url'?: string;
    /**
     * 
     * @type {CarDtoResponse}
     * @memberof ImagesDtoResponse
     */
    'car'?: CarDtoResponse;
}
/**
 * 
 * @export
 * @interface LoginDtoRequest
 */
export interface LoginDtoRequest {
    /**
     * name
     * @type {string}
     * @memberof LoginDtoRequest
     */
    'name': string;
    /**
     * password
     * @type {string}
     * @memberof LoginDtoRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginDtoResponse
 */
export interface LoginDtoResponse {
    /**
     * name
     * @type {string}
     * @memberof LoginDtoResponse
     */
    'name'?: string;
    /**
     * JWT token
     * @type {string}
     * @memberof LoginDtoResponse
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface PageAdminDtoResponse
 */
export interface PageAdminDtoResponse {
    /**
     * 
     * @type {number}
     * @memberof PageAdminDtoResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageAdminDtoResponse
     */
    'totalElements'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageAdminDtoResponse
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageAdminDtoResponse
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageAdminDtoResponse
     */
    'last'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageAdminDtoResponse
     */
    'size'?: number;
    /**
     * 
     * @type {Array<AdminDtoResponse>}
     * @memberof PageAdminDtoResponse
     */
    'content'?: Array<AdminDtoResponse>;
    /**
     * 
     * @type {number}
     * @memberof PageAdminDtoResponse
     */
    'number'?: number;
    /**
     * 
     * @type {Array<SortObject>}
     * @memberof PageAdminDtoResponse
     */
    'sort'?: Array<SortObject>;
    /**
     * 
     * @type {number}
     * @memberof PageAdminDtoResponse
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageAdminDtoResponse
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface PageAppointmentDtoResponse
 */
export interface PageAppointmentDtoResponse {
    /**
     * 
     * @type {number}
     * @memberof PageAppointmentDtoResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageAppointmentDtoResponse
     */
    'totalElements'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageAppointmentDtoResponse
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageAppointmentDtoResponse
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageAppointmentDtoResponse
     */
    'last'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageAppointmentDtoResponse
     */
    'size'?: number;
    /**
     * 
     * @type {Array<AppointmentDtoResponse>}
     * @memberof PageAppointmentDtoResponse
     */
    'content'?: Array<AppointmentDtoResponse>;
    /**
     * 
     * @type {number}
     * @memberof PageAppointmentDtoResponse
     */
    'number'?: number;
    /**
     * 
     * @type {Array<SortObject>}
     * @memberof PageAppointmentDtoResponse
     */
    'sort'?: Array<SortObject>;
    /**
     * 
     * @type {number}
     * @memberof PageAppointmentDtoResponse
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageAppointmentDtoResponse
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface PageCarDtoResponse
 */
export interface PageCarDtoResponse {
    /**
     * 
     * @type {number}
     * @memberof PageCarDtoResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCarDtoResponse
     */
    'totalElements'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageCarDtoResponse
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageCarDtoResponse
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageCarDtoResponse
     */
    'last'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageCarDtoResponse
     */
    'size'?: number;
    /**
     * 
     * @type {Array<CarDtoResponse>}
     * @memberof PageCarDtoResponse
     */
    'content'?: Array<CarDtoResponse>;
    /**
     * 
     * @type {number}
     * @memberof PageCarDtoResponse
     */
    'number'?: number;
    /**
     * 
     * @type {Array<SortObject>}
     * @memberof PageCarDtoResponse
     */
    'sort'?: Array<SortObject>;
    /**
     * 
     * @type {number}
     * @memberof PageCarDtoResponse
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageCarDtoResponse
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface PageDetailsDtoResponse
 */
export interface PageDetailsDtoResponse {
    /**
     * 
     * @type {number}
     * @memberof PageDetailsDtoResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageDetailsDtoResponse
     */
    'totalElements'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageDetailsDtoResponse
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageDetailsDtoResponse
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageDetailsDtoResponse
     */
    'last'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageDetailsDtoResponse
     */
    'size'?: number;
    /**
     * 
     * @type {Array<DetailsDtoResponse>}
     * @memberof PageDetailsDtoResponse
     */
    'content'?: Array<DetailsDtoResponse>;
    /**
     * 
     * @type {number}
     * @memberof PageDetailsDtoResponse
     */
    'number'?: number;
    /**
     * 
     * @type {Array<SortObject>}
     * @memberof PageDetailsDtoResponse
     */
    'sort'?: Array<SortObject>;
    /**
     * 
     * @type {number}
     * @memberof PageDetailsDtoResponse
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageDetailsDtoResponse
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface PageImagesDtoResponse
 */
export interface PageImagesDtoResponse {
    /**
     * 
     * @type {number}
     * @memberof PageImagesDtoResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageImagesDtoResponse
     */
    'totalElements'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageImagesDtoResponse
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageImagesDtoResponse
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageImagesDtoResponse
     */
    'last'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageImagesDtoResponse
     */
    'size'?: number;
    /**
     * 
     * @type {Array<ImagesDtoResponse>}
     * @memberof PageImagesDtoResponse
     */
    'content'?: Array<ImagesDtoResponse>;
    /**
     * 
     * @type {number}
     * @memberof PageImagesDtoResponse
     */
    'number'?: number;
    /**
     * 
     * @type {Array<SortObject>}
     * @memberof PageImagesDtoResponse
     */
    'sort'?: Array<SortObject>;
    /**
     * 
     * @type {number}
     * @memberof PageImagesDtoResponse
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageImagesDtoResponse
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface PagePricesDtoResponse
 */
export interface PagePricesDtoResponse {
    /**
     * 
     * @type {number}
     * @memberof PagePricesDtoResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PagePricesDtoResponse
     */
    'totalElements'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof PagePricesDtoResponse
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof PagePricesDtoResponse
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagePricesDtoResponse
     */
    'last'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PagePricesDtoResponse
     */
    'size'?: number;
    /**
     * 
     * @type {Array<PricesDtoResponse>}
     * @memberof PagePricesDtoResponse
     */
    'content'?: Array<PricesDtoResponse>;
    /**
     * 
     * @type {number}
     * @memberof PagePricesDtoResponse
     */
    'number'?: number;
    /**
     * 
     * @type {Array<SortObject>}
     * @memberof PagePricesDtoResponse
     */
    'sort'?: Array<SortObject>;
    /**
     * 
     * @type {number}
     * @memberof PagePricesDtoResponse
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagePricesDtoResponse
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface PageVisitorDtoResponse
 */
export interface PageVisitorDtoResponse {
    /**
     * 
     * @type {number}
     * @memberof PageVisitorDtoResponse
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageVisitorDtoResponse
     */
    'totalElements'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageVisitorDtoResponse
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageVisitorDtoResponse
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageVisitorDtoResponse
     */
    'last'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageVisitorDtoResponse
     */
    'size'?: number;
    /**
     * 
     * @type {Array<VisitorDtoResponse>}
     * @memberof PageVisitorDtoResponse
     */
    'content'?: Array<VisitorDtoResponse>;
    /**
     * 
     * @type {number}
     * @memberof PageVisitorDtoResponse
     */
    'number'?: number;
    /**
     * 
     * @type {Array<SortObject>}
     * @memberof PageVisitorDtoResponse
     */
    'sort'?: Array<SortObject>;
    /**
     * 
     * @type {number}
     * @memberof PageVisitorDtoResponse
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageVisitorDtoResponse
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface Pageable
 */
export interface Pageable {
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    'size'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Pageable
     */
    'sort'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PageableObject
 */
export interface PageableObject {
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageSize'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'paged'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'unpaged'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'offset'?: number;
    /**
     * 
     * @type {Array<SortObject>}
     * @memberof PageableObject
     */
    'sort'?: Array<SortObject>;
}
/**
 * 
 * @export
 * @interface PricesDtoRequest
 */
export interface PricesDtoRequest {
    /**
     * 
     * @type {number}
     * @memberof PricesDtoRequest
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof PricesDtoRequest
     */
    'changeDatetime': string;
}
/**
 * 
 * @export
 * @interface PricesDtoResponse
 */
export interface PricesDtoResponse {
    /**
     * 
     * @type {number}
     * @memberof PricesDtoResponse
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PricesDtoResponse
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof PricesDtoResponse
     */
    'changeDatetime'?: string;
}
/**
 * 
 * @export
 * @interface SortObject
 */
export interface SortObject {
    /**
     * 
     * @type {string}
     * @memberof SortObject
     */
    'direction'?: string;
    /**
     * 
     * @type {string}
     * @memberof SortObject
     */
    'nullHandling'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'ascending'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SortObject
     */
    'property'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'ignoreCase'?: boolean;
}
/**
 * 
 * @export
 * @interface VisitorDtoRequest
 */
export interface VisitorDtoRequest {
    /**
     * 
     * @type {string}
     * @memberof VisitorDtoRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof VisitorDtoRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof VisitorDtoRequest
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface VisitorDtoResponse
 */
export interface VisitorDtoResponse {
    /**
     * 
     * @type {number}
     * @memberof VisitorDtoResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof VisitorDtoResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof VisitorDtoResponse
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof VisitorDtoResponse
     */
    'message'?: string;
}

/**
 * AdminControllerApi - axios parameter creator
 * @export
 */
export const AdminControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new admin
         * @summary Create an admin
         * @param {AdminDtoRequest} adminDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdmin: async (adminDtoRequest: AdminDtoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminDtoRequest' is not null or undefined
            assertParamExists('createAdmin', 'adminDtoRequest', adminDtoRequest)
            const localVarPath = `/api/admins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminDtoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an admin by id
         * @summary Delete an admin
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdmin: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAdmin', 'id', id)
            const localVarPath = `/api/admins/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Admin By Id
         * @summary Get Admin
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAdminById', 'id', id)
            const localVarPath = `/api/admins/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get All Admin
         * @summary Get All Admin
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAdmin: async (pageable: Pageable, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('getAllAdmin', 'pageable', pageable)
            const localVarPath = `/api/admins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageable !== undefined) {
                for (const [key, value] of Object.entries(pageable)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an admin by Id and new Admin
         * @summary Update an admin
         * @param {number} id 
         * @param {AdminDtoRequest} adminDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdmin: async (id: number, adminDtoRequest: AdminDtoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAdmin', 'id', id)
            // verify required parameter 'adminDtoRequest' is not null or undefined
            assertParamExists('updateAdmin', 'adminDtoRequest', adminDtoRequest)
            const localVarPath = `/api/admins/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminDtoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminControllerApi - functional programming interface
 * @export
 */
export const AdminControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * Create new admin
         * @summary Create an admin
         * @param {AdminDtoRequest} adminDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAdmin(adminDtoRequest: AdminDtoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAdmin(adminDtoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.createAdmin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an admin by id
         * @summary Delete an admin
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAdmin(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAdmin(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.deleteAdmin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Admin By Id
         * @summary Get Admin
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdminById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdminById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.getAdminById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get All Admin
         * @summary Get All Admin
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAdmin(pageable: Pageable, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageAdminDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAdmin(pageable, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.getAllAdmin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an admin by Id and new Admin
         * @summary Update an admin
         * @param {number} id 
         * @param {AdminDtoRequest} adminDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAdmin(id: number, adminDtoRequest: AdminDtoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAdmin(id, adminDtoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.updateAdmin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminControllerApi - factory interface
 * @export
 */
export const AdminControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminControllerApiFp(configuration)
    return {
        /**
         * Create new admin
         * @summary Create an admin
         * @param {AdminDtoRequest} adminDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdmin(adminDtoRequest: AdminDtoRequest, options?: any): AxiosPromise<AdminDtoResponse> {
            return localVarFp.createAdmin(adminDtoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an admin by id
         * @summary Delete an admin
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdmin(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.deleteAdmin(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Admin By Id
         * @summary Get Admin
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminById(id: number, options?: any): AxiosPromise<AdminDtoResponse> {
            return localVarFp.getAdminById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get All Admin
         * @summary Get All Admin
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAdmin(pageable: Pageable, options?: any): AxiosPromise<PageAdminDtoResponse> {
            return localVarFp.getAllAdmin(pageable, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an admin by Id and new Admin
         * @summary Update an admin
         * @param {number} id 
         * @param {AdminDtoRequest} adminDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdmin(id: number, adminDtoRequest: AdminDtoRequest, options?: any): AxiosPromise<AdminDtoResponse> {
            return localVarFp.updateAdmin(id, adminDtoRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminControllerApi - object-oriented interface
 * @export
 * @class AdminControllerApi
 * @extends {BaseAPI}
 */
export class AdminControllerApi extends BaseAPI {
    /**
     * Create new admin
     * @summary Create an admin
     * @param {AdminDtoRequest} adminDtoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public async createAdmin(adminDtoRequest: AdminDtoRequest, options?: RawAxiosRequestConfig) {
        const request = await AdminControllerApiFp(this.configuration).createAdmin(adminDtoRequest, options);
        return await request(this.axios, this.basePath);
    }

    /**
     * Delete an admin by id
     * @summary Delete an admin
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public async deleteAdmin(id: number, options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).deleteAdmin(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Admin By Id
     * @summary Get Admin
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public async getAdminById(id: number, options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).getAdminById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get All Admin
     * @summary Get All Admin
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public async getAllAdmin(pageable: Pageable, options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).getAllAdmin(pageable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an admin by Id and new Admin
     * @summary Update an admin
     * @param {number} id 
     * @param {AdminDtoRequest} adminDtoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public async updateAdmin(id: number, adminDtoRequest: AdminDtoRequest, options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).updateAdmin(id, adminDtoRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AppointmentControllerApi - axios parameter creator
 * @export
 */
export const AppointmentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new appointment
         * @summary Create an appointment
         * @param {AppointmentDtoRequest} appointmentDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppointment: async (appointmentDtoRequest: AppointmentDtoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appointmentDtoRequest' is not null or undefined
            assertParamExists('createAppointment', 'appointmentDtoRequest', appointmentDtoRequest)
            const localVarPath = `/api/appointments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appointmentDtoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an appointment by id
         * @summary Delete an appointment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppointment: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAppointment', 'id', id)
            const localVarPath = `/api/appointments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get All Appointment
         * @summary Get All Appointment
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAppointment: async (pageable: Pageable, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('getAllAppointment', 'pageable', pageable)
            const localVarPath = `/api/appointments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageable !== undefined) {
                for (const [key, value] of Object.entries(pageable)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Appointment By Id
         * @summary Get Appointment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppointmentById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAppointmentById', 'id', id)
            const localVarPath = `/api/appointments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an appointment by Id and new Appointment
         * @summary Update an appointment
         * @param {number} id 
         * @param {AppointmentDtoRequest} appointmentDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAppointment: async (id: number, appointmentDtoRequest: AppointmentDtoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAppointment', 'id', id)
            // verify required parameter 'appointmentDtoRequest' is not null or undefined
            assertParamExists('updateAppointment', 'appointmentDtoRequest', appointmentDtoRequest)
            const localVarPath = `/api/appointments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appointmentDtoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppointmentControllerApi - functional programming interface
 * @export
 */
export const AppointmentControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppointmentControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * Create new appointment
         * @summary Create an appointment
         * @param {AppointmentDtoRequest} appointmentDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAppointment(appointmentDtoRequest: AppointmentDtoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppointmentDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAppointment(appointmentDtoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppointmentControllerApi.createAppointment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an appointment by id
         * @summary Delete an appointment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAppointment(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAppointment(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppointmentControllerApi.deleteAppointment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get All Appointment
         * @summary Get All Appointment
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAppointment(pageable: Pageable, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageAppointmentDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAppointment(pageable, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppointmentControllerApi.getAllAppointment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Appointment By Id
         * @summary Get Appointment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppointmentById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppointmentDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppointmentById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppointmentControllerApi.getAppointmentById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an appointment by Id and new Appointment
         * @summary Update an appointment
         * @param {number} id 
         * @param {AppointmentDtoRequest} appointmentDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAppointment(id: number, appointmentDtoRequest: AppointmentDtoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppointmentDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAppointment(id, appointmentDtoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppointmentControllerApi.updateAppointment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AppointmentControllerApi - factory interface
 * @export
 */
export const AppointmentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppointmentControllerApiFp(configuration)
    return {
        /**
         * Create new appointment
         * @summary Create an appointment
         * @param {AppointmentDtoRequest} appointmentDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppointment(appointmentDtoRequest: AppointmentDtoRequest, options?: any): AxiosPromise<AppointmentDtoResponse> {
            return localVarFp.createAppointment(appointmentDtoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an appointment by id
         * @summary Delete an appointment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppointment(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.deleteAppointment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get All Appointment
         * @summary Get All Appointment
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAppointment(pageable: Pageable, options?: any): AxiosPromise<PageAppointmentDtoResponse> {
            return localVarFp.getAllAppointment(pageable, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Appointment By Id
         * @summary Get Appointment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppointmentById(id: number, options?: any): AxiosPromise<AppointmentDtoResponse> {
            return localVarFp.getAppointmentById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an appointment by Id and new Appointment
         * @summary Update an appointment
         * @param {number} id 
         * @param {AppointmentDtoRequest} appointmentDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAppointment(id: number, appointmentDtoRequest: AppointmentDtoRequest, options?: any): AxiosPromise<AppointmentDtoResponse> {
            return localVarFp.updateAppointment(id, appointmentDtoRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppointmentControllerApi - object-oriented interface
 * @export
 * @class AppointmentControllerApi
 * @extends {BaseAPI}
 */
export class AppointmentControllerApi extends BaseAPI {
    /**
     * Create new appointment
     * @summary Create an appointment
     * @param {AppointmentDtoRequest} appointmentDtoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentControllerApi
     */
    public async createAppointment(appointmentDtoRequest: AppointmentDtoRequest, options?: RawAxiosRequestConfig) {
        return AppointmentControllerApiFp(this.configuration).createAppointment(appointmentDtoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an appointment by id
     * @summary Delete an appointment
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentControllerApi
     */
    public async deleteAppointment(id: number, options?: RawAxiosRequestConfig) {
        return AppointmentControllerApiFp(this.configuration).deleteAppointment(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get All Appointment
     * @summary Get All Appointment
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentControllerApi
     */
    public async getAllAppointment(pageable: Pageable, options?: RawAxiosRequestConfig) {
        return AppointmentControllerApiFp(this.configuration).getAllAppointment(pageable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Appointment By Id
     * @summary Get Appointment
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentControllerApi
     */
    public async getAppointmentById(id: number, options?: RawAxiosRequestConfig) {
        return AppointmentControllerApiFp(this.configuration).getAppointmentById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an appointment by Id and new Appointment
     * @summary Update an appointment
     * @param {number} id 
     * @param {AppointmentDtoRequest} appointmentDtoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentControllerApi
     */
    public async updateAppointment(id: number, appointmentDtoRequest: AppointmentDtoRequest, options?: RawAxiosRequestConfig) {
        return AppointmentControllerApiFp(this.configuration).updateAppointment(id, appointmentDtoRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CarControllerApi - axios parameter creator
 * @export
 */
export const CarControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new car
         * @summary Create an car
         * @param {CarDtoRequest} carDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCar: async (carDtoRequest: CarDtoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carDtoRequest' is not null or undefined
            assertParamExists('createCar', 'carDtoRequest', carDtoRequest)
            const localVarPath = `/api/cars`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(carDtoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an car by id
         * @summary Delete an car
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCar: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCar', 'id', id)
            const localVarPath = `/api/cars/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get All Car
         * @summary Get All Car
         * @param {Pageable} pageable 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {string} [color] 
         * @param {string} [motorType] 
         * @param {string} [power] 
         * @param {string} [status] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCar: async (pageable: Pageable, name?: string, description?: string, color?: string, motorType?: string, power?: string, status?: string, type?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('getAllCar', 'pageable', pageable)
            const localVarPath = `/api/cars`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageable !== undefined) {
                for (const [key, value] of Object.entries(pageable)) {
                    localVarQueryParameter[key] = value;
                }
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (color !== undefined) {
                localVarQueryParameter['color'] = color;
            }

            if (motorType !== undefined) {
                localVarQueryParameter['motorType'] = motorType;
            }

            if (power !== undefined) {
                localVarQueryParameter['power'] = power;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Car By Id
         * @summary Get Car
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCarById', 'id', id)
            const localVarPath = `/api/cars/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an car by Id and new Car
         * @summary Update an car
         * @param {number} id 
         * @param {CarDtoRequest} carDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCar: async (id: number, carDtoRequest: CarDtoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCar', 'id', id)
            // verify required parameter 'carDtoRequest' is not null or undefined
            assertParamExists('updateCar', 'carDtoRequest', carDtoRequest)
            const localVarPath = `/api/cars/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(carDtoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CarControllerApi - functional programming interface
 * @export
 */
export const CarControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CarControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * Create new car
         * @summary Create an car
         * @param {CarDtoRequest} carDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCar(carDtoRequest: CarDtoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCar(carDtoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarControllerApi.createCar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an car by id
         * @summary Delete an car
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCar(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCar(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarControllerApi.deleteCar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get All Car
         * @summary Get All Car
         * @param {Pageable} pageable 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {string} [color] 
         * @param {string} [motorType] 
         * @param {string} [power] 
         * @param {string} [status] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCar(pageable: Pageable, name?: string, description?: string, color?: string, motorType?: string, power?: string, status?: string, type?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCarDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCar(pageable, name, description, color, motorType, power, status, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarControllerApi.getAllCar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Car By Id
         * @summary Get Car
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCarById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCarById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarControllerApi.getCarById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an car by Id and new Car
         * @summary Update an car
         * @param {number} id 
         * @param {CarDtoRequest} carDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCar(id: number, carDtoRequest: CarDtoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCar(id, carDtoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarControllerApi.updateCar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CarControllerApi - factory interface
 * @export
 */
export const CarControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CarControllerApiFp(configuration)
    return {
        /**
         * Create new car
         * @summary Create an car
         * @param {CarDtoRequest} carDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCar(carDtoRequest: CarDtoRequest, options?: any): AxiosPromise<CarDtoResponse> {
            return localVarFp.createCar(carDtoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an car by id
         * @summary Delete an car
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCar(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.deleteCar(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get All Car
         * @summary Get All Car
         * @param {Pageable} pageable 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {string} [color] 
         * @param {string} [motorType] 
         * @param {string} [power] 
         * @param {string} [status] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCar(pageable: Pageable, name?: string, description?: string, color?: string, motorType?: string, power?: string, status?: string, type?: string, options?: any): AxiosPromise<PageCarDtoResponse> {
            return localVarFp.getAllCar(pageable, name, description, color, motorType, power, status, type, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Car By Id
         * @summary Get Car
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarById(id: number, options?: any): AxiosPromise<CarDtoResponse> {
            return localVarFp.getCarById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an car by Id and new Car
         * @summary Update an car
         * @param {number} id 
         * @param {CarDtoRequest} carDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCar(id: number, carDtoRequest: CarDtoRequest, options?: any): AxiosPromise<CarDtoResponse> {
            return localVarFp.updateCar(id, carDtoRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CarControllerApi - object-oriented interface
 * @export
 * @class CarControllerApi
 * @extends {BaseAPI}
 */
export class CarControllerApi extends BaseAPI {
    /**
     * Create new car
     * @summary Create an car
     * @param {CarDtoRequest} carDtoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarControllerApi
     */
    public async createCar(carDtoRequest: CarDtoRequest, options?: RawAxiosRequestConfig) {
        return CarControllerApiFp(this.configuration).createCar(carDtoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an car by id
     * @summary Delete an car
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarControllerApi
     */
    public async deleteCar(id: number, options?: RawAxiosRequestConfig) {
        return CarControllerApiFp(this.configuration).deleteCar(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get All Car
     * @summary Get All Car
     * @param {Pageable} pageable 
     * @param {string} [name] 
     * @param {string} [description] 
     * @param {string} [color] 
     * @param {string} [motorType] 
     * @param {string} [power] 
     * @param {string} [status] 
     * @param {string} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarControllerApi
     */
    public async getAllCar(pageable: Pageable, name?: string, description?: string, color?: string, motorType?: string, power?: string, status?: string, type?: string, options?: RawAxiosRequestConfig) {
        return CarControllerApiFp(this.configuration).getAllCar(pageable, name, description, color, motorType, power, status, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Car By Id
     * @summary Get Car
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarControllerApi
     */
    public async getCarById(id: number, options?: RawAxiosRequestConfig) {
        return CarControllerApiFp(this.configuration).getCarById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an car by Id and new Car
     * @summary Update an car
     * @param {number} id 
     * @param {CarDtoRequest} carDtoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarControllerApi
     */
    public async updateCar(id: number, carDtoRequest: CarDtoRequest, options?: RawAxiosRequestConfig) {
        return CarControllerApiFp(this.configuration).updateCar(id, carDtoRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DetailsControllerApi - axios parameter creator
 * @export
 */
export const DetailsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new details
         * @summary Create an details
         * @param {DetailsDtoRequest} detailsDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDetails: async (detailsDtoRequest: DetailsDtoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'detailsDtoRequest' is not null or undefined
            assertParamExists('createDetails', 'detailsDtoRequest', detailsDtoRequest)
            const localVarPath = `/api/details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(detailsDtoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an details by id
         * @summary Delete an details
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDetails: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDetails', 'id', id)
            const localVarPath = `/api/details/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get All Details
         * @summary Get All Details
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDetails: async (pageable: Pageable, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('getAllDetails', 'pageable', pageable)
            const localVarPath = `/api/details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageable !== undefined) {
                for (const [key, value] of Object.entries(pageable)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Details By Id
         * @summary Get Details
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDetailsById', 'id', id)
            const localVarPath = `/api/details/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an details by Id and new Details
         * @summary Update an details
         * @param {number} id 
         * @param {DetailsDtoRequest} detailsDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDetails: async (id: number, detailsDtoRequest: DetailsDtoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateDetails', 'id', id)
            // verify required parameter 'detailsDtoRequest' is not null or undefined
            assertParamExists('updateDetails', 'detailsDtoRequest', detailsDtoRequest)
            const localVarPath = `/api/details/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(detailsDtoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DetailsControllerApi - functional programming interface
 * @export
 */
export const DetailsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DetailsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * Create new details
         * @summary Create an details
         * @param {DetailsDtoRequest} detailsDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDetails(detailsDtoRequest: DetailsDtoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailsDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDetails(detailsDtoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DetailsControllerApi.createDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an details by id
         * @summary Delete an details
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDetails(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDetails(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DetailsControllerApi.deleteDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get All Details
         * @summary Get All Details
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDetails(pageable: Pageable, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageDetailsDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDetails(pageable, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DetailsControllerApi.getAllDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Details By Id
         * @summary Get Details
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetailsById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailsDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetailsById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DetailsControllerApi.getDetailsById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an details by Id and new Details
         * @summary Update an details
         * @param {number} id 
         * @param {DetailsDtoRequest} detailsDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDetails(id: number, detailsDtoRequest: DetailsDtoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailsDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDetails(id, detailsDtoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DetailsControllerApi.updateDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DetailsControllerApi - factory interface
 * @export
 */
export const DetailsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DetailsControllerApiFp(configuration)
    return {
        /**
         * Create new details
         * @summary Create an details
         * @param {DetailsDtoRequest} detailsDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDetails(detailsDtoRequest: DetailsDtoRequest, options?: any): AxiosPromise<DetailsDtoResponse> {
            return localVarFp.createDetails(detailsDtoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an details by id
         * @summary Delete an details
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDetails(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.deleteDetails(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get All Details
         * @summary Get All Details
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDetails(pageable: Pageable, options?: any): AxiosPromise<PageDetailsDtoResponse> {
            return localVarFp.getAllDetails(pageable, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Details By Id
         * @summary Get Details
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsById(id: number, options?: any): AxiosPromise<DetailsDtoResponse> {
            return localVarFp.getDetailsById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an details by Id and new Details
         * @summary Update an details
         * @param {number} id 
         * @param {DetailsDtoRequest} detailsDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDetails(id: number, detailsDtoRequest: DetailsDtoRequest, options?: any): AxiosPromise<DetailsDtoResponse> {
            return localVarFp.updateDetails(id, detailsDtoRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DetailsControllerApi - object-oriented interface
 * @export
 * @class DetailsControllerApi
 * @extends {BaseAPI}
 */
export class DetailsControllerApi extends BaseAPI {
    /**
     * Create new details
     * @summary Create an details
     * @param {DetailsDtoRequest} detailsDtoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DetailsControllerApi
     */
    public async createDetails(detailsDtoRequest: DetailsDtoRequest, options?: RawAxiosRequestConfig) {
        return DetailsControllerApiFp(this.configuration).createDetails(detailsDtoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an details by id
     * @summary Delete an details
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DetailsControllerApi
     */
    public async deleteDetails(id: number, options?: RawAxiosRequestConfig) {
        return DetailsControllerApiFp(this.configuration).deleteDetails(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get All Details
     * @summary Get All Details
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DetailsControllerApi
     */
    public async getAllDetails(pageable: Pageable, options?: RawAxiosRequestConfig) {
        return DetailsControllerApiFp(this.configuration).getAllDetails(pageable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Details By Id
     * @summary Get Details
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DetailsControllerApi
     */
    public async getDetailsById(id: number, options?: RawAxiosRequestConfig) {
        return DetailsControllerApiFp(this.configuration).getDetailsById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an details by Id and new Details
     * @summary Update an details
     * @param {number} id 
     * @param {DetailsDtoRequest} detailsDtoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DetailsControllerApi
     */
    public async updateDetails(id: number, detailsDtoRequest: DetailsDtoRequest, options?: RawAxiosRequestConfig) {
        return DetailsControllerApiFp(this.configuration).updateDetails(id, detailsDtoRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ImagesControllerApi - axios parameter creator
 * @export
 */
export const ImagesControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new images
         * @summary Create an images
         * @param {ImagesDtoRequest} imagesDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImages: async (imagesDtoRequest: ImagesDtoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imagesDtoRequest' is not null or undefined
            assertParamExists('createImages', 'imagesDtoRequest', imagesDtoRequest)
            const localVarPath = `/api/images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imagesDtoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an images by id
         * @summary Delete an images
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImages: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteImages', 'id', id)
            const localVarPath = `/api/images/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get All Images
         * @summary Get All Images
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllImages: async (pageable: Pageable, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('getAllImages', 'pageable', pageable)
            const localVarPath = `/api/images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageable !== undefined) {
                for (const [key, value] of Object.entries(pageable)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Images By Id
         * @summary Get Images
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImagesById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getImagesById', 'id', id)
            const localVarPath = `/api/images/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an images by Id and new Images
         * @summary Update an images
         * @param {number} id 
         * @param {ImagesDtoRequest} imagesDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateImages: async (id: number, imagesDtoRequest: ImagesDtoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateImages', 'id', id)
            // verify required parameter 'imagesDtoRequest' is not null or undefined
            assertParamExists('updateImages', 'imagesDtoRequest', imagesDtoRequest)
            const localVarPath = `/api/images/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imagesDtoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImagesControllerApi - functional programming interface
 * @export
 */
export const ImagesControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImagesControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * Create new images
         * @summary Create an images
         * @param {ImagesDtoRequest} imagesDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createImages(imagesDtoRequest: ImagesDtoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImagesDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createImages(imagesDtoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImagesControllerApi.createImages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an images by id
         * @summary Delete an images
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteImages(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImages(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImagesControllerApi.deleteImages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get All Images
         * @summary Get All Images
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllImages(pageable: Pageable, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageImagesDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllImages(pageable, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImagesControllerApi.getAllImages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Images By Id
         * @summary Get Images
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImagesById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImagesDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImagesById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImagesControllerApi.getImagesById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an images by Id and new Images
         * @summary Update an images
         * @param {number} id 
         * @param {ImagesDtoRequest} imagesDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateImages(id: number, imagesDtoRequest: ImagesDtoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImagesDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateImages(id, imagesDtoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImagesControllerApi.updateImages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ImagesControllerApi - factory interface
 * @export
 */
export const ImagesControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImagesControllerApiFp(configuration)
    return {
        /**
         * Create new images
         * @summary Create an images
         * @param {ImagesDtoRequest} imagesDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImages(imagesDtoRequest: ImagesDtoRequest, options?: any): AxiosPromise<ImagesDtoResponse> {
            return localVarFp.createImages(imagesDtoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an images by id
         * @summary Delete an images
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImages(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.deleteImages(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get All Images
         * @summary Get All Images
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllImages(pageable: Pageable, options?: any): AxiosPromise<PageImagesDtoResponse> {
            return localVarFp.getAllImages(pageable, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Images By Id
         * @summary Get Images
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImagesById(id: number, options?: any): AxiosPromise<ImagesDtoResponse> {
            return localVarFp.getImagesById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an images by Id and new Images
         * @summary Update an images
         * @param {number} id 
         * @param {ImagesDtoRequest} imagesDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateImages(id: number, imagesDtoRequest: ImagesDtoRequest, options?: any): AxiosPromise<ImagesDtoResponse> {
            return localVarFp.updateImages(id, imagesDtoRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImagesControllerApi - object-oriented interface
 * @export
 * @class ImagesControllerApi
 * @extends {BaseAPI}
 */
export class ImagesControllerApi extends BaseAPI {
    /**
     * Create new images
     * @summary Create an images
     * @param {ImagesDtoRequest} imagesDtoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesControllerApi
     */
    public async createImages(imagesDtoRequest: ImagesDtoRequest, options?: RawAxiosRequestConfig) {
        return ImagesControllerApiFp(this.configuration).createImages(imagesDtoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an images by id
     * @summary Delete an images
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesControllerApi
     */
    public async deleteImages(id: number, options?: RawAxiosRequestConfig) {
        return ImagesControllerApiFp(this.configuration).deleteImages(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get All Images
     * @summary Get All Images
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesControllerApi
     */
    public async getAllImages(pageable: Pageable, options?: RawAxiosRequestConfig) {
        return ImagesControllerApiFp(this.configuration).getAllImages(pageable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Images By Id
     * @summary Get Images
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesControllerApi
     */
    public async getImagesById(id: number, options?: RawAxiosRequestConfig) {
        return ImagesControllerApiFp(this.configuration).getImagesById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an images by Id and new Images
     * @summary Update an images
     * @param {number} id 
     * @param {ImagesDtoRequest} imagesDtoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesControllerApi
     */
    public async updateImages(id: number, imagesDtoRequest: ImagesDtoRequest, options?: RawAxiosRequestConfig) {
        return ImagesControllerApiFp(this.configuration).updateImages(id, imagesDtoRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LoginControllerApi - axios parameter creator
 * @export
 */
export const LoginControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Authenticate user and return token
         * @param {LoginDtoRequest} loginDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginDtoRequest: LoginDtoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginDtoRequest' is not null or undefined
            assertParamExists('login', 'loginDtoRequest', loginDtoRequest)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDtoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get recent login attempts
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAttempts: async (authorization: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('loginAttempts', 'authorization', authorization)
            const localVarPath = `/api/auth/loginAttempts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginControllerApi - functional programming interface
 * @export
 */
export const LoginControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Authenticate user and return token
         * @param {LoginDtoRequest} loginDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginDtoRequest: LoginDtoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginDtoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoginControllerApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get recent login attempts
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginAttempts(authorization: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginAttempts(authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoginControllerApi.loginAttempts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LoginControllerApi - factory interface
 * @export
 */
export const LoginControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Authenticate user and return token
         * @param {LoginDtoRequest} loginDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginDtoRequest: LoginDtoRequest, options?: any): AxiosPromise<LoginDtoResponse> {
            return localVarFp.login(loginDtoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get recent login attempts
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAttempts(authorization: string, options?: any): AxiosPromise<LoginDtoResponse> {
            return localVarFp.loginAttempts(authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginControllerApi - object-oriented interface
 * @export
 * @class LoginControllerApi
 * @extends {BaseAPI}
 */
export class LoginControllerApi extends BaseAPI {
    /**
     * 
     * @summary Authenticate user and return token
     * @param {LoginDtoRequest} loginDtoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginControllerApi
     */
    public login(loginDtoRequest: LoginDtoRequest, options?: RawAxiosRequestConfig) {
        return LoginControllerApiFp(this.configuration).login(loginDtoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get recent login attempts
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginControllerApi
     */
    public loginAttempts(authorization: string, options?: RawAxiosRequestConfig) {
        return LoginControllerApiFp(this.configuration).loginAttempts(authorization, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PricesControllerApi - axios parameter creator
 * @export
 */
export const PricesControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new prices
         * @summary Create an prices
         * @param {PricesDtoRequest} pricesDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPrices: async (pricesDtoRequest: PricesDtoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pricesDtoRequest' is not null or undefined
            assertParamExists('createPrices', 'pricesDtoRequest', pricesDtoRequest)
            const localVarPath = `/api/prices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pricesDtoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an prices by id
         * @summary Delete an prices
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrices: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePrices', 'id', id)
            const localVarPath = `/api/prices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get All Prices
         * @summary Get All Prices
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPrices: async (pageable: Pageable, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('getAllPrices', 'pageable', pageable)
            const localVarPath = `/api/prices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageable !== undefined) {
                for (const [key, value] of Object.entries(pageable)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Prices By Id
         * @summary Get Prices
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricesById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPricesById', 'id', id)
            const localVarPath = `/api/prices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an prices by Id and new Prices
         * @summary Update an prices
         * @param {number} id 
         * @param {PricesDtoRequest} pricesDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrices: async (id: number, pricesDtoRequest: PricesDtoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePrices', 'id', id)
            // verify required parameter 'pricesDtoRequest' is not null or undefined
            assertParamExists('updatePrices', 'pricesDtoRequest', pricesDtoRequest)
            const localVarPath = `/api/prices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pricesDtoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PricesControllerApi - functional programming interface
 * @export
 */
export const PricesControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PricesControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * Create new prices
         * @summary Create an prices
         * @param {PricesDtoRequest} pricesDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPrices(pricesDtoRequest: PricesDtoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PricesDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPrices(pricesDtoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PricesControllerApi.createPrices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an prices by id
         * @summary Delete an prices
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePrices(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePrices(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PricesControllerApi.deletePrices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get All Prices
         * @summary Get All Prices
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPrices(pageable: Pageable, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagePricesDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPrices(pageable, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PricesControllerApi.getAllPrices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Prices By Id
         * @summary Get Prices
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPricesById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PricesDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPricesById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PricesControllerApi.getPricesById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an prices by Id and new Prices
         * @summary Update an prices
         * @param {number} id 
         * @param {PricesDtoRequest} pricesDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrices(id: number, pricesDtoRequest: PricesDtoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PricesDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrices(id, pricesDtoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PricesControllerApi.updatePrices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PricesControllerApi - factory interface
 * @export
 */
export const PricesControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PricesControllerApiFp(configuration)
    return {
        /**
         * Create new prices
         * @summary Create an prices
         * @param {PricesDtoRequest} pricesDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPrices(pricesDtoRequest: PricesDtoRequest, options?: any): AxiosPromise<PricesDtoResponse> {
            return localVarFp.createPrices(pricesDtoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an prices by id
         * @summary Delete an prices
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrices(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.deletePrices(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get All Prices
         * @summary Get All Prices
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPrices(pageable: Pageable, options?: any): AxiosPromise<PagePricesDtoResponse> {
            return localVarFp.getAllPrices(pageable, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Prices By Id
         * @summary Get Prices
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricesById(id: number, options?: any): AxiosPromise<PricesDtoResponse> {
            return localVarFp.getPricesById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an prices by Id and new Prices
         * @summary Update an prices
         * @param {number} id 
         * @param {PricesDtoRequest} pricesDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrices(id: number, pricesDtoRequest: PricesDtoRequest, options?: any): AxiosPromise<PricesDtoResponse> {
            return localVarFp.updatePrices(id, pricesDtoRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PricesControllerApi - object-oriented interface
 * @export
 * @class PricesControllerApi
 * @extends {BaseAPI}
 */
export class PricesControllerApi extends BaseAPI {
    /**
     * Create new prices
     * @summary Create an prices
     * @param {PricesDtoRequest} pricesDtoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricesControllerApi
     */
    public async createPrices(pricesDtoRequest: PricesDtoRequest, options?: RawAxiosRequestConfig) {
        return PricesControllerApiFp(this.configuration).createPrices(pricesDtoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an prices by id
     * @summary Delete an prices
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricesControllerApi
     */
    public async deletePrices(id: number, options?: RawAxiosRequestConfig) {
        return PricesControllerApiFp(this.configuration).deletePrices(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get All Prices
     * @summary Get All Prices
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricesControllerApi
     */
    public async getAllPrices(pageable: Pageable, options?: RawAxiosRequestConfig) {
        return PricesControllerApiFp(this.configuration).getAllPrices(pageable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Prices By Id
     * @summary Get Prices
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricesControllerApi
     */
    public async getPricesById(id: number, options?: RawAxiosRequestConfig) {
        return PricesControllerApiFp(this.configuration).getPricesById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an prices by Id and new Prices
     * @summary Update an prices
     * @param {number} id 
     * @param {PricesDtoRequest} pricesDtoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricesControllerApi
     */
    public async updatePrices(id: number, pricesDtoRequest: PricesDtoRequest, options?: RawAxiosRequestConfig) {
        return PricesControllerApiFp(this.configuration).updatePrices(id, pricesDtoRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VisitorControllerApi - axios parameter creator
 * @export
 */
export const VisitorControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new visitor
         * @summary Create an visitor
         * @param {VisitorDtoRequest} visitorDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVisitor: async (visitorDtoRequest: VisitorDtoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'visitorDtoRequest' is not null or undefined
            assertParamExists('createVisitor', 'visitorDtoRequest', visitorDtoRequest)
            const localVarPath = `/api/visitor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(visitorDtoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an visitor by id
         * @summary Delete an visitor
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVisitor: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteVisitor', 'id', id)
            const localVarPath = `/api/visitor/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get All Visitor
         * @summary Get All Visitor
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVisitor: async (pageable: Pageable, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('getAllVisitor', 'pageable', pageable)
            const localVarPath = `/api/visitor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageable !== undefined) {
                for (const [key, value] of Object.entries(pageable)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Visitor By Id
         * @summary Get Visitor
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVisitorById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getVisitorById', 'id', id)
            const localVarPath = `/api/visitor/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an visitor by Id and new Visitor
         * @summary Update an visitor
         * @param {number} id 
         * @param {VisitorDtoRequest} visitorDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVisitor: async (id: number, visitorDtoRequest: VisitorDtoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateVisitor', 'id', id)
            // verify required parameter 'visitorDtoRequest' is not null or undefined
            assertParamExists('updateVisitor', 'visitorDtoRequest', visitorDtoRequest)
            const localVarPath = `/api/visitor/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(visitorDtoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VisitorControllerApi - functional programming interface
 * @export
 */
export const VisitorControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VisitorControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * Create new visitor
         * @summary Create an visitor
         * @param {VisitorDtoRequest} visitorDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVisitor(visitorDtoRequest: VisitorDtoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VisitorDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVisitor(visitorDtoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VisitorControllerApi.createVisitor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an visitor by id
         * @summary Delete an visitor
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVisitor(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVisitor(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VisitorControllerApi.deleteVisitor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get All Visitor
         * @summary Get All Visitor
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllVisitor(pageable: Pageable, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageVisitorDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllVisitor(pageable, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VisitorControllerApi.getAllVisitor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Visitor By Id
         * @summary Get Visitor
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVisitorById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VisitorDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVisitorById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VisitorControllerApi.getVisitorById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an visitor by Id and new Visitor
         * @summary Update an visitor
         * @param {number} id 
         * @param {VisitorDtoRequest} visitorDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVisitor(id: number, visitorDtoRequest: VisitorDtoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VisitorDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVisitor(id, visitorDtoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VisitorControllerApi.updateVisitor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VisitorControllerApi - factory interface
 * @export
 */
export const VisitorControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VisitorControllerApiFp(configuration)
    return {
        /**
         * Create new visitor
         * @summary Create an visitor
         * @param {VisitorDtoRequest} visitorDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVisitor(visitorDtoRequest: VisitorDtoRequest, options?: any): AxiosPromise<VisitorDtoResponse> {
            return localVarFp.createVisitor(visitorDtoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an visitor by id
         * @summary Delete an visitor
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVisitor(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.deleteVisitor(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get All Visitor
         * @summary Get All Visitor
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVisitor(pageable: Pageable, options?: any): AxiosPromise<PageVisitorDtoResponse> {
            return localVarFp.getAllVisitor(pageable, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Visitor By Id
         * @summary Get Visitor
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVisitorById(id: number, options?: any): AxiosPromise<VisitorDtoResponse> {
            return localVarFp.getVisitorById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an visitor by Id and new Visitor
         * @summary Update an visitor
         * @param {number} id 
         * @param {VisitorDtoRequest} visitorDtoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVisitor(id: number, visitorDtoRequest: VisitorDtoRequest, options?: any): AxiosPromise<VisitorDtoResponse> {
            return localVarFp.updateVisitor(id, visitorDtoRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VisitorControllerApi - object-oriented interface
 * @export
 * @class VisitorControllerApi
 * @extends {BaseAPI}
 */
export class VisitorControllerApi extends BaseAPI {
    /**
     * Create new visitor
     * @summary Create an visitor
     * @param {VisitorDtoRequest} visitorDtoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisitorControllerApi
     */
    public async createVisitor(visitorDtoRequest: VisitorDtoRequest, options?: RawAxiosRequestConfig) {
        return VisitorControllerApiFp(this.configuration).createVisitor(visitorDtoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an visitor by id
     * @summary Delete an visitor
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisitorControllerApi
     */
    public async deleteVisitor(id: number, options?: RawAxiosRequestConfig) {
        return VisitorControllerApiFp(this.configuration).deleteVisitor(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get All Visitor
     * @summary Get All Visitor
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisitorControllerApi
     */
    public async getAllVisitor(pageable: Pageable, options?: RawAxiosRequestConfig) {
        return VisitorControllerApiFp(this.configuration).getAllVisitor(pageable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Visitor By Id
     * @summary Get Visitor
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisitorControllerApi
     */
    public async getVisitorById(id: number, options?: RawAxiosRequestConfig) {
        return VisitorControllerApiFp(this.configuration).getVisitorById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an visitor by Id and new Visitor
     * @summary Update an visitor
     * @param {number} id 
     * @param {VisitorDtoRequest} visitorDtoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisitorControllerApi
     */
    public async updateVisitor(id: number, visitorDtoRequest: VisitorDtoRequest, options?: RawAxiosRequestConfig) {
        return VisitorControllerApiFp(this.configuration).updateVisitor(id, visitorDtoRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



